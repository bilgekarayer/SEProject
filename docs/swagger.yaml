basePath: /
definitions:
  SEProject_Cart_types.CartItem:
    properties:
      id:
        description: autogenerated by DB
        type: integer
      product_id:
        type: integer
      quantity:
        type: integer
      user_id:
        description: inferred from JWT
        type: integer
    type: object
  types.CartItemRequest:
    properties:
      product_id:
        example: 1
        type: integer
      quantity:
        example: 2
        type: integer
    type: object
  types.LoginRequest:
    properties:
      password:
        example: "123456"
        type: string
      username:
        example: john_doe
        type: string
    type: object
  types.RegisterRequest:
    properties:
      firstName:
        description: ⬅︎ değişti
        type: string
      lastName:
        description: ⬅︎ değişti
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  types.User:
    properties:
      created_at:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      password:
        type: string
      role_id:
        type: integer
      role_name:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: RESTful API for restaurant ordering system
  title: SEProject API
  version: "1.0"
paths:
  /cart/add-to-cart:
    post:
      consumes:
      - application/json
      description: Adds a product to the authenticated user's cart
      parameters:
      - description: Item to add
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/types.CartItemRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Add item to cart
      tags:
      - Cart
  /cart/delete/{menuId}:
    delete:
      description: Removes a menu item from the authenticated user's cart
      parameters:
      - description: Menu ID
        in: path
        name: menuId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Remove item from cart
      tags:
      - Cart
  /cart/get-cart-items:
    get:
      description: Retrieves all items in the authenticated user's cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/SEProject_Cart_types.CartItem'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user's cart items
      tags:
      - Cart
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates user and returns JWT
      parameters:
      - description: Login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login user
      tags:
      - User
  /register:
    post:
      consumes:
      - application/json
      description: Creates a new user with hashed password
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - User
  /user:
    get:
      description: Get a user by providing their username
      parameters:
      - description: Username to search
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user by username
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Creates a new user in the system
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.User'
      produces:
      - application/json
      responses:
        "201":
          description: User created
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Failed to create user
          schema:
            type: string
      summary: Create a new user
      tags:
      - User
  /user/{id}:
    delete:
      description: Deletes a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted
          schema:
            type: string
        "400":
          description: Invalid id
          schema:
            type: string
        "500":
          description: Failed to delete user
          schema:
            type: string
      summary: Delete user
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Updates the user data by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.User'
      produces:
      - application/json
      responses:
        "200":
          description: User updated
          schema:
            type: string
        "400":
          description: Invalid id or input
          schema:
            type: string
        "500":
          description: Failed to update user
          schema:
            type: string
      summary: Update user
      tags:
      - User
  /user/all:
    get:
      description: Returns all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all users
      tags:
      - User
  /user/me:
    get:
      consumes:
      - application/json
      description: Returns the currently authenticated user's info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
